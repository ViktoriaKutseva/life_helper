from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, ContextTypes, CallbackQueryHandler, JobQueue
from sqlalchemy.orm import sessionmaker
from loguru import logger
from datetime import datetime, time
from functools import partial
from pytz import timezone
import asyncio

from database.database import engine, SessionLocal
from services.crud import create_user, get_user_by_telegram_id, create_task, get_tasks_by_user
from config import get_env_vars
from models.models import User, Task
from enums.frequency import Frequency



class TgBotClient:
    def __init__(self, token: str, db_url: str):
        self.db_client = db_url  # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        self._bot: Application = (
            Application.builder()
            .token(token)
            .post_init(self.post_init)
            .build()
        )
        
        self._set_commands(self._bot)

    def _set_commands(self, application: Application) -> None:
        logger.info("Setting up commands...")
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("add_task", self.add_task_command))
        application.add_handler(CallbackQueryHandler(self.handle_button_click))
        application.add_handler(CommandHandler("list_task", self.show_all_tasks))


    async def post_init(self, application: Application) -> None:
        await application.bot.set_my_commands([
            BotCommand("start", "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"),
            BotCommand("add_task", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"),
            BotCommand("list_task", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
        ])
        chat_id = "624165496"
        try:
            await application.bot.send_message(chat_id=chat_id, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logger.info("Startup message sent successfully.")
        except Exception as e:
            logger.error(f"Failed to send startup message: {e}")
            
    async def get_username_by_id(self, bot, user_id: int):
        try:
            chat = await bot.get_chat(user_id)
            return chat.username if chat.username else chat.first_name
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
   
    async def start_command(self, update, context):
        logger.info("Start adding user")
        
        chat_id = update.effective_chat.id
        db = SessionLocal()

        try:
            user = get_user_by_telegram_id(db, chat_id)
            bot = context.bot  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
            username = await self.get_username_by_id(bot, chat_id)  # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            
            logger.info("Getting user's username by id")

            if not user:
                user = create_user(db, chat_id)
                await update.message.reply_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, {username}! üéâ")
                logger.info("User registered successfully")
            else:
                await update.message.reply_text(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, {username}! üòä")
                logger.info("User is already in the database")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            db.close()
            
    async def add_task_command(self, update: Update, context: CallbackContext) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ - –∂–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É."""
        if not context.args:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ /add_task.")
            return

        task_name = " ".join(context.args) 
        context.user_data["task_name"] = task_name 

        keyboard = [
            [InlineKeyboardButton(freq.name, callback_data=f"frequency_{freq.name}")]
            for freq in Frequency
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É: {task_name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É:", reply_markup=reply_markup)

    async def handle_button_click(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –ë–î."""
        query = update.callback_query
        await query.answer()

        chat_id = query.message.chat_id
        db = SessionLocal()
        user = get_user_by_telegram_id(db, chat_id)
        
        if not user:
            await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")
            db.close()
            return

        if query.data.startswith("frequency_"):
            frequency = query.data.split("_")[1]
            task_name = context.user_data.get("task_name")

            if not task_name:
                await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
                db.close()
                return

            create_task(
                db=db,
                user_id=user.id,
                title=task_name,
                frequency=frequency
            )

            await query.message.reply_text(f"–ó–∞–¥–∞—á–∞ '{task_name}' —Å —á–∞—Å—Ç–æ—Ç–æ–π '{frequency}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
        
        db.close()
        
        
    async def show_all_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            db = SessionLocal()
            user_id = update.effective_user.id  # –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º user_id

            try:
                user = get_user_by_telegram_id(db, user_id)
                if not user:
                    await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                    return

                user_tasks = get_tasks_by_user(db, user.id)  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ user.id

                if not user_tasks:
                    await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
                    return

                task_list = "\n".join(
                    [f"üîπ {task.title} ({task.frequency.name}) {'‚úÖ' if task.completed else '‚ùå'}"
                    for task in user_tasks]
                )

                await update.message.reply_text(f"üìå –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{task_list}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")
            finally:
                db.close()

    def run(self):
        logger.info("Starting bot")
        self._bot.run_polling()